package sfs
package jio

import java.nio.{ file => jnf }
import jnf.{ Files => F }
import jnf.LinkOption.NOFOLLOW_LINKS

object JioFiles extends JioFiles

trait JioFiles extends Any {
  def copy(in: InputStream, target: Path, options: CopyOption*): Long                                                 = F.copy(in, target, options: _*)
  def copy(source: Path, out: OutputStream): Long                                                                     = F.copy(source, out)
  def copy(source: Path, target: Path, options: CopyOption*): Path                                                    = F.copy(source, target, options: _*)
  def createDirectories(dir: Path, attrs: AnyFileAttr*): Path                                                         = F.createDirectories(dir, attrs: _*)
  def createDirectory(dir: Path, attrs: AnyFileAttr*): Path                                                           = F.createDirectory(dir, attrs: _*)
  def createFile(path: Path, attrs: AnyFileAttr*): Path                                                               = F.createFile(path, attrs: _*)
  def createLink(link: Path, existing: Path): Path                                                                    = F.createLink(link, existing)
  def createSymbolicLink(link: Path, target: Path, attrs: AnyFileAttr*): Path                                         = F.createSymbolicLink(link, target, attrs: _*)
  def createTempDirectory(dir: Path, prefix: String, attrs: AnyFileAttr*): Path                                       = F.createTempDirectory(dir, prefix, attrs: _*)
  def createTempDirectory(prefix: String, attrs: AnyFileAttr*): Path                                                  = F.createTempDirectory(prefix, attrs: _*)
  def createTempFile(dir: Path, prefix: String, suffix: String, attrs: AnyFileAttr*): Path                            = F.createTempFile(dir, prefix, suffix, attrs: _*)
  def createTempFile(prefix: String, suffix: String, attrs: AnyFileAttr*): Path                                       = F.createTempFile(prefix, suffix, attrs: _*)
  def delete(path: Path): Unit                                                                                        = F.delete(path)
  def deleteIfExists(path: Path): Boolean                                                                             = F.deleteIfExists(path)
  def exists(path: Path, options: LinkOption*): Boolean                                                               = F.exists(path, options: _*)
  def getAttribute(path: Path, attribute: String, options: LinkOption*): Object                                       = F.getAttribute(path, attribute, options: _*)
  def getFileAttributeView[V <: FileAttributeView](path: Path, `type`: Class[V], options: LinkOption*): V             = F.getFileAttributeView(path, `type`, options: _*)
  def getFileStore(path: Path): FileStore                                                                             = F.getFileStore(path)
  def getLastModifiedTime(path: Path, options: LinkOption*): FileTime                                                 = F.getLastModifiedTime(path, options: _*)
  def getOwner(path: Path, options: LinkOption*): UserPrincipal                                                       = F.getOwner(path, options: _*)
  def getPosixFilePermissions(path: Path, options: LinkOption*): jFilePermissions                                     = F.getPosixFilePermissions(path, options: _*)
  def isDirectory(path: Path, options: LinkOption*): Boolean                                                          = F.isDirectory(path, options: _*)
  def isExecutable(path: Path): Boolean                                                                               = F.isExecutable(path)
  def isHidden(path: Path): Boolean                                                                                   = F.isHidden(path)
  def isReadable(path: Path): Boolean                                                                                 = F.isReadable(path)
  def isRegularFile(path: Path, options: LinkOption*): Boolean                                                        = F.isRegularFile(path, options: _*)
  def isSameFile(path: Path, path2: Path): Boolean                                                                    = F.isSameFile(path, path2)
  def isSymbolicLink(path: Path): Boolean                                                                             = F.isSymbolicLink(path)
  def isWritable(path: Path): Boolean                                                                                 = F.isWritable(path)
  def move(source: Path, target: Path, options: CopyOption*): Path                                                    = F.move(source, target, options: _*)
  def newBufferedReader(path: Path, cs: Charset): BufferedReader                                                      = F.newBufferedReader(path, cs)
  def newBufferedWriter(path: Path, cs: Charset, options: OpenOption*): BufferedWriter                                = F.newBufferedWriter(path, cs, options: _*)
  def newByteChannel(path: Path, options: OpenOption*): SeekableByteChannel                                           = F.newByteChannel(path, options: _*)
  def newByteChannel(path: Path, options: jSet[_ <: OpenOption], attrs: AnyFileAttr*): SeekableByteChannel            = F.newByteChannel(path, options, attrs: _*)
  def newDirectoryStream(dir: Path): PathDirStream                                                                    = F.newDirectoryStream(dir)
  def newDirectoryStream(dir: Path, filter: DirStreamFilter[_ >: Path]): PathDirStream                                = F.newDirectoryStream(dir, filter)
  def newDirectoryStream(dir: Path, glob: String): PathDirStream                                                      = F.newDirectoryStream(dir, glob)
  def newInputStream(path: Path, options: OpenOption*): InputStream                                                   = F.newInputStream(path, options: _*)
  def newOutputStream(path: Path, options: OpenOption*): OutputStream                                                 = F.newOutputStream(path, options: _*)
  def notExists(path: Path, options: LinkOption*): Boolean                                                            = F.notExists(path, options: _*)
  def probeContentType(path: Path): String                                                                            = F.probeContentType(path)
  def readAllBytes(path: Path): Array[Byte]                                                                           = F.readAllBytes(path)
  def readAllLines(path: Path, cs: Charset): jList[String]                                                            = F.readAllLines(path, cs)
  def readAttributes(path: Path, attributes: String, options: LinkOption*): jMap[String, Object]                      = F.readAttributes(path, attributes, options: _*)
  def readAttributes[A <: BasicFileAttributes](path: Path, `type`: Class[A], options: LinkOption*): A                 = F.readAttributes(path, `type`, options: _*)
  def readSymbolicLink(link: Path): Path                                                                              = F.readSymbolicLink(link)
  def setAttribute(path: Path, attribute: String, value: Any, options: LinkOption*): Path                             = F.setAttribute(path, attribute, value, options: _*)
  def setLastModifiedTime(path: Path, time: FileTime): Path                                                           = F.setLastModifiedTime(path, time)
  def setOwner(path: Path, owner: UserPrincipal): Path                                                                = F.setOwner(path, owner)
  def setPosixFilePermissions(path: Path, perms: jFilePermissions): Path                                              = F.setPosixFilePermissions(path, perms)
  def size(path: Path): Long                                                                                          = F.size(path)
  def walkFileTree(start: Path, options: jSet[FileVisitOption], maxDepth: Int, visitor: FileVisitor[_ >: Path]): Path = F.walkFileTree(start, options, maxDepth, visitor)
  def walkFileTree(start: Path, visitor: FileVisitor[_ >: Path]): Path                                                = F.walkFileTree(start, visitor)
  def write(path: Path, bytes: Array[Byte], options: OpenOption*): Path                                               = F.write(path, bytes, options: _*)
  def write(path: Path, lines: jLineIterable, cs: Charset, options: OpenOption*): Path                                = F.write(path, lines, cs, options: _*)
}

// LinkOption <: ( CopyOption, OpenOption )
//
// Link options: NOFOLLOW_LINKS
// Copy options: ATOMIC_MOVE, COPY_ATTRIBUTES, REPLACE_EXISTING
// Open options: APPEND CREATE CREATE_NEW DELETE_ON_CLOSE DSYNC READ SPARSE SYNC TRUNCATE_EXISTING WRITE
class JioFollow(path: Path) {
  def exists(): Boolean                                                 = F.exists(path)
  def getAttribute(attribute: String): Object                           = F.getAttribute(path, attribute)
  def getFileAttributeView[V <: FileAttributeView](`type`: Class[V]): V = F.getFileAttributeView(path, `type`)
  def getLastModifiedTime(): FileTime                                   = F.getLastModifiedTime(path)
  def getOwner(): UserPrincipal                                         = F.getOwner(path)
  def getPosixFilePermissions(): jFilePermissions                       = F.getPosixFilePermissions(path)
  def isDirectory(): Boolean                                            = F.isDirectory(path)
  def isRegularFile(): Boolean                                          = F.isRegularFile(path)
  def notExists(): Boolean                                              = F.notExists(path)
  def readAttributes(attributes: String): jMap[String, Object]          = F.readAttributes(path, attributes)
  def readAttributes[A <: BasicFileAttributes](`type`: Class[A]): A     = F.readAttributes(path, `type`)
  def setAttribute[A](attribute: String, value: A): Path                = F.setAttribute(path, attribute, value)
}

class JioNoFollow(path: Path) {
  def exists(): Boolean                                                 = F.exists(path, NOFOLLOW_LINKS)
  def getAttribute(attribute: String): Object                           = F.getAttribute(path, attribute, NOFOLLOW_LINKS)
  def getFileAttributeView[V <: FileAttributeView](`type`: Class[V]): V = F.getFileAttributeView(path, `type`, NOFOLLOW_LINKS)
  def getLastModifiedTime(): FileTime                                   = F.getLastModifiedTime(path, NOFOLLOW_LINKS)
  def getOwner(): UserPrincipal                                         = F.getOwner(path, NOFOLLOW_LINKS)
  def getPosixFilePermissions(): jFilePermissions                       = F.getPosixFilePermissions(path, NOFOLLOW_LINKS)
  def isDirectory(): Boolean                                            = F.isDirectory(path, NOFOLLOW_LINKS)
  def isRegularFile(): Boolean                                          = F.isRegularFile(path, NOFOLLOW_LINKS)
  def notExists(): Boolean                                              = F.notExists(path, NOFOLLOW_LINKS)
  def readAttributes(attributes: String): jMap[String, Object]          = F.readAttributes(path, attributes, NOFOLLOW_LINKS)
  def readAttributes[A <: BasicFileAttributes](`type`: Class[A]): A     = F.readAttributes(path, `type`, NOFOLLOW_LINKS)
  def setAttribute[A](attribute: String, value: A): Path                = F.setAttribute(path, attribute, value, NOFOLLOW_LINKS)
}

class JioFilesInstance(path: Path) {
  def follow: JioFollow     = new JioFollow(path)
  def nofollow: JioNoFollow = new JioNoFollow(path)

  def copy(out: OutputStream): Long                                                                      = F.copy(path, out)
  def copy(target: Path, options: CopyOption*): Path                                                     = F.copy(path, target, options: _*)
  def createDirectories(attrs: AnyFileAttr*): Path                                                       = F.createDirectories(path, attrs: _*)
  def createDirectory(attrs: AnyFileAttr*): Path                                                         = F.createDirectory(path, attrs: _*)
  def createFile(attrs: AnyFileAttr*): Path                                                              = F.createFile(path, attrs: _*)
  def createLink(existing: Path): Path                                                                   = F.createLink(path, existing)
  def createSymbolicLink(target: Path, attrs: AnyFileAttr*): Path                                        = F.createSymbolicLink(path, target, attrs: _*)
  def createTempDirectory(prefix: String, attrs: AnyFileAttr*): Path                                     = F.createTempDirectory(path, prefix, attrs: _*)
  def createTempFile(prefix: String, suffix: String, attrs: AnyFileAttr*): Path                          = F.createTempFile(path, prefix, suffix, attrs: _*)
  def delete(): Unit                                                                                     = F.delete(path)
  def deleteIfExists(): Boolean                                                                          = F.deleteIfExists(path)
  def getFileStore(): FileStore                                                                          = F.getFileStore(path)
  def isExecutable(): Boolean                                                                            = F.isExecutable(path)
  def isHidden(): Boolean                                                                                = F.isHidden(path)
  def isReadable(): Boolean                                                                              = F.isReadable(path)
  def isSameFile(path2: Path): Boolean                                                                   = F.isSameFile(path, path2)
  def isSymbolicLink(): Boolean                                                                          = F.isSymbolicLink(path)
  def isWritable(): Boolean                                                                              = F.isWritable(path)
  def move(target: Path, options: CopyOption*): Path                                                     = F.move(path, target, options: _*)
  def newBufferedReader(cs: Charset): BufferedReader                                                     = F.newBufferedReader(path, cs)
  def newBufferedWriter(cs: Charset, options: OpenOption*): BufferedWriter                               = F.newBufferedWriter(path, cs, options: _*)
  def newByteChannel(options: OpenOption*): SeekableByteChannel                                          = F.newByteChannel(path, options: _*)
  def newByteChannel(options: jSet[_ <: OpenOption], attrs: AnyFileAttr*): SeekableByteChannel           = F.newByteChannel(path, options, attrs: _*)
  def newDirectoryStream(): PathDirStream                                                                = F.newDirectoryStream(path)
  def newDirectoryStream(filter: DirStreamFilter[_ >: Path]): PathDirStream                              = F.newDirectoryStream(path, filter)
  def newDirectoryStream(glob: String): PathDirStream                                                    = F.newDirectoryStream(path, glob)
  def newInputStream(options: OpenOption*): InputStream                                                  = F.newInputStream(path, options: _*)
  def newOutputStream(options: OpenOption*): OutputStream                                                = F.newOutputStream(path, options: _*)
  def probeContentType(): String                                                                         = F.probeContentType(path)
  def readAllBytes(): Array[Byte]                                                                        = F.readAllBytes(path)
  def readAllLines(cs: Charset): jList[String]                                                           = F.readAllLines(path, cs)
  def readSymbolicLink(): Path                                                                           = F.readSymbolicLink(path)
  def setLastModifiedTime(time: FileTime): Path                                                          = F.setLastModifiedTime(path, time)
  def setOwner(owner: UserPrincipal): Path                                                               = F.setOwner(path, owner)
  def setPosixFilePermissions(perms: jFilePermissions): Path                                             = F.setPosixFilePermissions(path, perms)
  def size(): Long                                                                                       = F.size(path)
  def walkFileTree(options: jSet[FileVisitOption], maxDepth: Int, visitor: FileVisitor[_ >: Path]): Path = F.walkFileTree(path, options, maxDepth, visitor)
  def walkFileTree(visitor: FileVisitor[_ >: Path]): Path                                                = F.walkFileTree(path, visitor)
  def write(bytes: Array[Byte], options: OpenOption*): Path                                              = F.write(path, bytes, options: _*)
  def write(lines: jLineIterable, cs: Charset, options: OpenOption*): Path                               = F.write(path, lines, cs, options: _*)
}
